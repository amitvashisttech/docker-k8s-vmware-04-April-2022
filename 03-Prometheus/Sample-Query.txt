{job=~".*etheus"}
prometheus_http_requests_total{code!~"2.."}
prometheus_http_requests_total{code!~"4.."}

rate(prometheus_http_requests_total{method="post"}[5m])

rate(prometheus_http_requests_total{code="200"}[5m])

rate(prometheus_http_requests_total{code=~"4.."}[3h])

prometheus_http_requests_total{code=~"2.*|4.*"}

rate(node_cpu_seconds_total{job="node_exporter", instance="172.31.0.100:9100"}[1m])



Function
rate(prometheus_http_requests_total[5m])
sum(rate(prometheus_http_requests_total[5m])) by (job)


( node_memory_MemTotal_bytes - node_memory_MemFree_bytes )

In GB - Memory Utilization

( node_memory_MemTotal_bytes - node_memory_MemFree_bytes ) / 1024 / 1024 / 1024




Grafana
========>
node_cpu_seconds_total{job="node_exporter", instance="172.31.0.100:9100"}

rate(node_cpu_seconds_total{job="node_exporter",instance="localhost:9100",mode!="idle"}[1m])

irate(node_cpu_seconds_total{job="node_exporter",instance="localhost:9100",mode!="idle"}[1m])


avg without(cpu) (rate(node_cpu_seconds_total{job="node_exporter", instance="172.31.0.100:9100", mode!="idle"}[1m]))


Legend : {{mode}}





Free : 

node_memory_MemFree_bytes{instance="172.31.0.101:9100",job="node_exporter"}

Buffer : 
node_memory_Buffers_bytes{instance="172.31.0.101:9100",job="node_exporter"}

Cache: 
node_memory_Cached_bytes{instance="172.31.0.101:9100",job="node_exporter"}

Used : 

node_memory_MemTotal_bytes{instance="172.31.0.101:9100",job="node_exporter"} - node_memory_MemFree_bytes{instance="172.31.0.101:9100",job="node_exporter"} - node_memory_Buffers_bytes{instance="172.31.0.101:9100",job="node_exporter"} - node_memory_Cached_bytes{instance="172.31.0.101:9100",job="node_exporter"}


Usage: 

node_memory_MemTotal_bytes{job="node_exporter"} - node_memory_MemFree_bytes{job="node_exporter"} - node_memory_Buffers_bytes{job="node_exporter"} - node_memory_Cached_bytes{job="node_exporter"}







100 - (avg(node_memory_MemAvailable_bytes{job="node_exporter"}) / avg(node_memory_MemTotal_bytes{job="node_exporter"}) * 100)



100 - (avg(node_memory_MemAvailable_bytes{job="node_exporter", instance="$instance"}) / avg(node_memory_MemTotal_bytes{job="node_exporter", instance="$instance"}) * 100)


100 - (   avg(node_memory_MemAvailable_bytes{job="node_exporter", instance="$instance"})  /   avg(node_memory_MemTotal_bytes{job="node_exporter", instance="$instance"}) * 100 )









Flask Web App: 

# docker-compose up -d 

# docker-compose ps 

# curl localhost:5000 

# curl localhost:8000

-> Update the promtheus file 
----



----
# systemctl stop prometheus
# systemctl start prometheus


-> Go to Prometheus UI & Excute the following query: 

( rate(mysql_query_latency_seconds_sum[5m]) / rate(mysql_query_latency_seconds_count[5m]) )

sum(rate(flask_request_latency_seconds_bucket{le="1.0"}[5m])) by (job) / sum(rate(flask_request_latency_seconds_count[5m])) by (job)

Appdex Score Query : 
==================>

( sum(rate(flask_request_latency_seconds_bucket{le="0.25"}[5m])) by (job) + sum(rate(flask_request_latency_seconds_bucket{le="1.0"}[5m])) by (job)  )/  2 / sum(rate(flask_request_latency_seconds_count[5m])) by (job)



To improve the score : 
 while true; do time curl localhost:5000/query; done

To decrease the score: 
while true; do time curl localhost:5000/sleep; done









